C++一般用cin和cout输入输出,也可用标准C的输入输出（要包括头文件stdio.h）
C++的I，O涉及到iostream文件，所以程序开始就要#include <iostream>
#include编译指令在编译程序时把对应文件替换该行指令
<> 先去系统目录找，再到当前目录找，一般用于 stdio.h、stdlib.h 等标准头文件
" "则相反，一般用于自定义的头文件
iostream.h继承C语言的标准库文件，未引入名字空间定义，不用using namespace
iostream则需要using namespace std，否则后续输入输出要加上std::
开发过程中尽量避免引入整个命名空间，直接命名空间::函数避免命名空间污染
std::endl 输出一个换行符后会立即刷新缓冲区(将其立即显示屏幕上)

存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。
int fun()
{
    static int count = 10; // 第一次进入这个函变量 count 被初始化为 10，并接着自减 1，以后每次进入该函数，count 的值是上一次函数运行之后的值
    return count--;        // 不会被再次初始化为10，仅进行自减 1 的操作；在 static 发明前，要达到同样的功能，则只能使用全局变量
}
静态全局变量有全局作用域，如果程序包含多个文，它作用于定义它的文件里，不能作用到其它文件里，
即被static关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。
Tips:
A、若全局变量仅在单个C文件中访问，可将其改为静态全局变量，降低模块间的耦合度；
B、若全局变量仅由单个函数访问，可将其改为该函数的静态局部变量，降低模块间的耦合度；
C、设计和使用访问动态全局变量、静态全局变量、静态局部变量的函数时，需要考虑重入问题，因为他们都放在静态数据存储区，全局可见；
D、如果我们需要一个可重入的函数，那么，我们一定要避免函数中使用static变量(这样的函数被称为：带“内部存储器”功能的的函数)
E、函数中必须要使用static变量情况:比如当某函数的返回值为指针类型时，则必须是static的局部变量的地址作为返回值，若为auto类型，则返回为错指针。








OOP
抽象：隐藏不相关的细节，只关注共同的本质特征。
封装：将一些关键的属性和针对属性的通用操作捆绑在一起，封装成一个类。
继承：
多态：
