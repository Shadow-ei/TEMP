https://blog.csdn.net/hr541659660/article/details/109999454
1346,1347,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1385,1386,1387,1388,1389,1390,1391,1392,1394,1395,1396,1397,1398,1399,1401,1402,1405,1406,1407,1408,1409,1410,1413,1414,1415,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1457,1458,1461,1462,
orderdata/1346,orderdata/1347,orderdata/1349,orderdata/1350,orderdata/1351,orderdata/1352,orderdata/1353,orderdata/1354,orderdata/1355,orderdata/1356,orderdata/1357,orderdata/1358,orderdata/1361,orderdata/1362,orderdata/1363,orderdata/1364,orderdata/1365,orderdata/1366,orderdata/1367,orderdata/1368,orderdata/1369,orderdata/1370,orderdata/1371,orderdata/1372,orderdata/1373,orderdata/1374,orderdata/1375,orderdata/1376,orderdata/1377,orderdata/1378,orderdata/1379,orderdata/1380,orderdata/1381,orderdata/1385,orderdata/1386,orderdata/1387,orderdata/1388,orderdata/1389,orderdata/1390,orderdata/1391,orderdata/1392,orderdata/1394,orderdata/1395,orderdata/1396,orderdata/1397,orderdata/1398,orderdata/1399,orderdata/1401,orderdata/1402,orderdata/1405,orderdata/1406,orderdata/1407,orderdata/1408,orderdata/1409,orderdata/1410,orderdata/1413,orderdata/1414,orderdata/1415,orderdata/1417,orderdata/1418,orderdata/1419,orderdata/1420,orderdata/1421,orderdata/1422,orderdata/1423,orderdata/1424,orderdata/1425,orderdata/1426,orderdata/1427,orderdata/1428,orderdata/1429,orderdata/1430,orderdata/1431,orderdata/1432,orderdata/1433,orderdata/1434,orderdata/1435,orderdata/1436,orderdata/1438,orderdata/1439,orderdata/1440,orderdata/1441,orderdata/1442,orderdata/1443,orderdata/1444,orderdata/1445,orderdata/1446,orderdata/1447,orderdata/1448,orderdata/1449,orderdata/1450,orderdata/1451,orderdata/1452,orderdata/1453,orderdata/1454,orderdata/1457,orderdata/1458,orderdata/1461,orderdata/1462

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using uPLibrary.Networking.M2Mqtt;
using uPLibrary.Networking.M2Mqtt.Messages;

namespace Test1
{
    class MQClient
    {
        MqttClient client;
        public void createClient(string intopic, Action<object, MqttMsgPublishEventArgs> callback)
        {
            try
            {
                client = new MqttClient("127.0.0.1", 1883, false, null, null, MqttSslProtocols.TLSv1_2);//10.98.5.76
                //创建客户端实例（两种方式选择，否则出错，域名需转换）
                //client.ProtocolVersion = (MqttProtocolVersion)7020;
                //2.为MqttMsgPublishReceived 事件绑定方法，当订阅到消息时执行callBack委托方法
                client.MqttMsgPublishReceived += (sender, e) =>
                {
                    callback.Invoke(sender, e);
                };
                client.Connect("FX_Client", "username", "123456");
                // 绑定mqtt断链时间   
                client.ConnectionClosed += delegate
                {
                    Task.Factory.StartNew(() =>
                    {
                        while (client == null || client.IsConnected == false)
                        {
                            Task.Delay(5 * 1000);
                            string topic = "orderdata/#";
                            createClient(topic, callback);
                            SubTopic(topic, callback);
                        }
                    }).ConfigureAwait(false);
                };
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        public void SubTopic(string topic, Action<object, MqttMsgPublishEventArgs> callBack)
        {
            //创建客户端并连接代理
            createClient(topic, callBack);
            //订阅主题
            client.Subscribe(new string[] { topic }, new byte[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });
        }
        //static void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)
        //{
        //    //Console.WriteLine(string.Format("{0}subscribe,topic:{1},content:{2}",DateTime.Now.ToString(), e.Topic, Encoding.UTF8.GetString(e.Message)));
        //    string msg = Encoding.UTF8.GetString(e.Message);
        //    JObject jOrder = JObject.Parse(Encoding.UTF8.GetString(e.Message));
        //    StreamWriter file = new StreamWriter(@"D:\OT_Data\otdata.txt", append: true);
        //    file.WriteLineAsync(DateTime.Now + "\n");
        //    foreach (var property in jOrder)
        //    {
        //        string key = property.Key;
        //        JToken value = property.Value;
        //        file.WriteLineAsync($"Key: {key}, Value: {value}" + "\n");
        //    }
        //    file.Close();
        //}
    }
}

using System;
using System.Collections.Generic;
using System.Text;
using uPLibrary.Networking.M2Mqtt;
using uPLibrary.Networking.M2Mqtt.Messages;
using System.Data.SqlClient;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Test1
{
    class Program
    {
        static void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)
        {
            //Console.WriteLine(string.Format("{0}subscribe,topic:{1},content:{2}",DateTime.Now.ToString(), e.Topic, Encoding.UTF8.GetString(e.Message)));
            string msg = Encoding.UTF8.GetString(e.Message);
            JObject jOrder = JObject.Parse(Encoding.UTF8.GetString(e.Message));
            StreamWriter file = new StreamWriter(@"D:\OT_Data\otdata.txt", append: true);
            file.WriteLineAsync(DateTime.Now + "\n");
            foreach (var property in jOrder)
            {
                string key = property.Key;
                JToken value = property.Value;
                file.WriteLineAsync($"Key: {key}, Value: {value}" + "\n");
            }
            file.Close();
        }
        static void Main(string[] args)
        {
            MQClient mq = new MQClient();
            mq.SubTopic("orderdata/#", client_MqttMsgPublishReceived);
